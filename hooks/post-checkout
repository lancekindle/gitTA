#!/usr/bin/env python

# https://github.com/git/git/blob/master/Documentation/githooks.txt#L149
# This hook is invoked when a 'git checkout' is run after having updated the
# worktree.  The hook is given three parameters: the ref of the previous HEAD,
# the ref of the new HEAD (which may or may not have changed), and a flag
# indicating whether the checkout was a branch checkout (changing branches,
#         flag=1) or a file checkout (retrieving a file from the index, flag=0).
# This hook cannot affect the outcome of 'git checkout'.
# 
# It is also run after 'git clone', unless the --no-checkout (-n) option is
# used. The first parameter given to the hook is the null-ref, the second the
# ref of the new HEAD and the flag is always 1.
# 
# This hook can be used to perform repository validity checks, auto-display
# differences from the previous HEAD if different, or set working dir metadata
# properties.
import sys
import gitta_hook
sys.argv.extend(sys.stdin.read().split())  # add stdin arguments
head_previous = sys.argv[1]  # where the head previously was before checkout
head_current = sys.argv[2]  # where the head now sits. If it was a branch
        # checkout then this is a also new_branch
is_branch_checkout = sys.argv[3]  # 1 or 0 flag indicating if checkout was
        # a branch checkout (1) or just moving the head around (0)
kwargs = {'head_previous': head_previous, 'head_current':head_current,
          'is_branch_checkout': is_branch_checkout}
gitta_hook.trigger(*sys.argv, **kwargs)

