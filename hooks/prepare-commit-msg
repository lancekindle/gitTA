#!/usr/bin/env python

# https://github.com/git/git/blob/master/Documentation/githooks.txt#L89
# This hook is invoked by 'git commit' right after preparing the
# default log message, and before the editor is started.

# It takes one to three parameters.  The first is the name of the file
# that contains the commit log message.  The second is the source of the commit
# message, and can be: `message` (if a `-m` or `-F` option was
# given); `template` (if a `-t` option was given or the
# configuration option `commit.template` is set); `merge` (if the
# commit is a merge or a `.git/MERGE_MSG` file exists); `squash`
# (if a `.git/SQUASH_MSG` file exists); or `commit`, followed by
# a commit SHA-1 (if a `-c`, `-C` or `--amend` option was given).

# If the exit status is non-zero, 'git commit' will abort.

# The purpose of the hook is to edit the message file in place, and
# it is not suppressed by the `--no-verify` option.  A non-zero exit
# means a failure of the hook and aborts the commit.  It should not
# be used as replacement for pre-commit hook.

# This also runs if user git commit -m "msg", in which case commit_msg_path
# will point to a temporary file with "msg" already in there. If the user
# commits with -m, commit_type will equal 'message'
import gitta_hook
import sys
# gather variables
commit_msg_path = sys.argv[1]
kwargs = {'commit_msg_path': commit_msg_path}
if len(sys.argv) > 2:
    commit_type = sys.argv[2]  # 'message', 'template', 'merge', 'squash', 
                               # 'commit
    kwargs['commit_type'] = commit_type
if len(sys.argv) > 3:
    commit_amended_sha1 = sys.argv[3]  # exists if commit_type='commit'
    kwargs['commit_amended_sha1'] = commit_amended_sha1
gitta_hook.trigger(*sys.argv, **kwargs)
